// Code generated by MockGen. DO NOT EDIT.
// Source: server/domain (interfaces: UpdateClassroomUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	postgresql "server/database/postgresql"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUpdateClassroomUsecase is a mock of UpdateClassroomUsecase interface.
type MockUpdateClassroomUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateClassroomUsecaseMockRecorder
}

// MockUpdateClassroomUsecaseMockRecorder is the mock recorder for MockUpdateClassroomUsecase.
type MockUpdateClassroomUsecaseMockRecorder struct {
	mock *MockUpdateClassroomUsecase
}

// NewMockUpdateClassroomUsecase creates a new mock instance.
func NewMockUpdateClassroomUsecase(ctrl *gomock.Controller) *MockUpdateClassroomUsecase {
	mock := &MockUpdateClassroomUsecase{ctrl: ctrl}
	mock.recorder = &MockUpdateClassroomUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateClassroomUsecase) EXPECT() *MockUpdateClassroomUsecaseMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockUpdateClassroomUsecase) GetByID(arg0 context.Context, arg1 uuid.UUID) (postgresql.Classroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(postgresql.Classroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUpdateClassroomUsecaseMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUpdateClassroomUsecase)(nil).GetByID), arg0, arg1)
}

// UpdateClassroomDescription mocks base method.
func (m *MockUpdateClassroomUsecase) UpdateClassroomDescription(arg0 context.Context, arg1 *postgresql.UpdateClassroomDescriptionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClassroomDescription", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClassroomDescription indicates an expected call of UpdateClassroomDescription.
func (mr *MockUpdateClassroomUsecaseMockRecorder) UpdateClassroomDescription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClassroomDescription", reflect.TypeOf((*MockUpdateClassroomUsecase)(nil).UpdateClassroomDescription), arg0, arg1)
}

// UpdateClassroomInviteCode mocks base method.
func (m *MockUpdateClassroomUsecase) UpdateClassroomInviteCode(arg0 context.Context, arg1 *postgresql.UpdateClassroomInviteCodeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClassroomInviteCode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClassroomInviteCode indicates an expected call of UpdateClassroomInviteCode.
func (mr *MockUpdateClassroomUsecaseMockRecorder) UpdateClassroomInviteCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClassroomInviteCode", reflect.TypeOf((*MockUpdateClassroomUsecase)(nil).UpdateClassroomInviteCode), arg0, arg1)
}

// UpdateClassroomName mocks base method.
func (m *MockUpdateClassroomUsecase) UpdateClassroomName(arg0 context.Context, arg1 *postgresql.UpdateClassroomNameParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClassroomName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClassroomName indicates an expected call of UpdateClassroomName.
func (mr *MockUpdateClassroomUsecaseMockRecorder) UpdateClassroomName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClassroomName", reflect.TypeOf((*MockUpdateClassroomUsecase)(nil).UpdateClassroomName), arg0, arg1)
}

// UpdateClassroomRoom mocks base method.
func (m *MockUpdateClassroomUsecase) UpdateClassroomRoom(arg0 context.Context, arg1 *postgresql.UpdateClassroomRoomParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClassroomRoom", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClassroomRoom indicates an expected call of UpdateClassroomRoom.
func (mr *MockUpdateClassroomUsecaseMockRecorder) UpdateClassroomRoom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClassroomRoom", reflect.TypeOf((*MockUpdateClassroomUsecase)(nil).UpdateClassroomRoom), arg0, arg1)
}

// UpdateClassroomSection mocks base method.
func (m *MockUpdateClassroomUsecase) UpdateClassroomSection(arg0 context.Context, arg1 *postgresql.UpdateClassroomSectionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClassroomSection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClassroomSection indicates an expected call of UpdateClassroomSection.
func (mr *MockUpdateClassroomUsecaseMockRecorder) UpdateClassroomSection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClassroomSection", reflect.TypeOf((*MockUpdateClassroomUsecase)(nil).UpdateClassroomSection), arg0, arg1)
}

// UpdateClassroomSubject mocks base method.
func (m *MockUpdateClassroomUsecase) UpdateClassroomSubject(arg0 context.Context, arg1 *postgresql.UpdateClassroomSubjectParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClassroomSubject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClassroomSubject indicates an expected call of UpdateClassroomSubject.
func (mr *MockUpdateClassroomUsecaseMockRecorder) UpdateClassroomSubject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClassroomSubject", reflect.TypeOf((*MockUpdateClassroomUsecase)(nil).UpdateClassroomSubject), arg0, arg1)
}
