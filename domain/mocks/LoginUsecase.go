// Code generated by MockGen. DO NOT EDIT.
// Source: server/domain (interfaces: LoginUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	postgresql "server/database/postgresql"
	tokenutil "server/internal/tokenutil"
	time "time"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockLoginUsecase is a mock of LoginUsecase interface.
type MockLoginUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockLoginUsecaseMockRecorder
}

// MockLoginUsecaseMockRecorder is the mock recorder for MockLoginUsecase.
type MockLoginUsecaseMockRecorder struct {
	mock *MockLoginUsecase
}

// NewMockLoginUsecase creates a new mock instance.
func NewMockLoginUsecase(ctrl *gomock.Controller) *MockLoginUsecase {
	mock := &MockLoginUsecase{ctrl: ctrl}
	mock.recorder = &MockLoginUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginUsecase) EXPECT() *MockLoginUsecaseMockRecorder {
	return m.recorder
}

// CreateAccessToken mocks base method.
func (m *MockLoginUsecase) CreateAccessToken(arg0 string, arg1 time.Duration) (string, *tokenutil.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*tokenutil.Payload)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateAccessToken indicates an expected call of CreateAccessToken.
func (mr *MockLoginUsecaseMockRecorder) CreateAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessToken", reflect.TypeOf((*MockLoginUsecase)(nil).CreateAccessToken), arg0, arg1)
}

// CreateRefreshToken mocks base method.
func (m *MockLoginUsecase) CreateRefreshToken(arg0 string, arg1 time.Duration) (string, *tokenutil.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*tokenutil.Payload)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRefreshToken indicates an expected call of CreateRefreshToken.
func (mr *MockLoginUsecaseMockRecorder) CreateRefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshToken", reflect.TypeOf((*MockLoginUsecase)(nil).CreateRefreshToken), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockLoginUsecase) GetUserByUsername(arg0 echo.Context, arg1 string) (postgresql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(postgresql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockLoginUsecaseMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockLoginUsecase)(nil).GetUserByUsername), arg0, arg1)
}
