// Code generated by MockGen. DO NOT EDIT.
// Source: server/domain (interfaces: GetClassroomUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	postgresql "server/database/postgresql"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockGetClassroomUsecase is a mock of GetClassroomUsecase interface.
type MockGetClassroomUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockGetClassroomUsecaseMockRecorder
}

// MockGetClassroomUsecaseMockRecorder is the mock recorder for MockGetClassroomUsecase.
type MockGetClassroomUsecaseMockRecorder struct {
	mock *MockGetClassroomUsecase
}

// NewMockGetClassroomUsecase creates a new mock instance.
func NewMockGetClassroomUsecase(ctrl *gomock.Controller) *MockGetClassroomUsecase {
	mock := &MockGetClassroomUsecase{ctrl: ctrl}
	mock.recorder = &MockGetClassroomUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetClassroomUsecase) EXPECT() *MockGetClassroomUsecaseMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockGetClassroomUsecase) GetByID(arg0 context.Context, arg1 uuid.UUID) (postgresql.Classroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(postgresql.Classroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockGetClassroomUsecaseMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockGetClassroomUsecase)(nil).GetByID), arg0, arg1)
}

// GetByInviteCode mocks base method.
func (m *MockGetClassroomUsecase) GetByInviteCode(arg0 context.Context, arg1 uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByInviteCode", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByInviteCode indicates an expected call of GetByInviteCode.
func (mr *MockGetClassroomUsecaseMockRecorder) GetByInviteCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByInviteCode", reflect.TypeOf((*MockGetClassroomUsecase)(nil).GetByInviteCode), arg0, arg1)
}

// GetClasroomsByUser mocks base method.
func (m *MockGetClassroomUsecase) GetClasroomsByUser(arg0 context.Context, arg1 postgresql.GetAllClassFromUserParams) ([]postgresql.Classroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClasroomsByUser", arg0, arg1)
	ret0, _ := ret[0].([]postgresql.Classroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClasroomsByUser indicates an expected call of GetClasroomsByUser.
func (mr *MockGetClassroomUsecaseMockRecorder) GetClasroomsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClasroomsByUser", reflect.TypeOf((*MockGetClassroomUsecase)(nil).GetClasroomsByUser), arg0, arg1)
}

// GetClassroomMembers mocks base method.
func (m *MockGetClassroomUsecase) GetClassroomMembers(arg0 context.Context, arg1 uuid.UUID) ([]postgresql.ClassroomMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassroomMembers", arg0, arg1)
	ret0, _ := ret[0].([]postgresql.ClassroomMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassroomMembers indicates an expected call of GetClassroomMembers.
func (mr *MockGetClassroomUsecaseMockRecorder) GetClassroomMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassroomMembers", reflect.TypeOf((*MockGetClassroomUsecase)(nil).GetClassroomMembers), arg0, arg1)
}
