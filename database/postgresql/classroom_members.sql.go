// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: classroom_members.sql

package postgresql

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addNewClassroomMember = `-- name: AddNewClassroomMember :one
INSERT INTO classroom_members
(
  id, class_id, user_id
)
VALUES
(
  $1, $2, $3
)
RETURNING id, class_id, user_id, created_at, updated_at
`

type AddNewClassroomMemberParams struct {
	ID      uuid.UUID `json:"id"`
	ClassID uuid.UUID `json:"class_id"`
	UserID  uuid.UUID `json:"user_id"`
}

func (q *Queries) AddNewClassroomMember(ctx context.Context, arg AddNewClassroomMemberParams) (ClassroomMember, error) {
	row := q.queryRow(ctx, q.addNewClassroomMemberStmt, addNewClassroomMember, arg.ID, arg.ClassID, arg.UserID)
	var i ClassroomMember
	err := row.Scan(
		&i.ID,
		&i.ClassID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllClassroomMembers = `-- name: GetAllClassroomMembers :many
SELECT id, user_id, created_at AS joined_at
FROM classroom_members
WHERE class_id = $1
ORDER BY created_at
LIMIT 10
OFFSET $2
`

type GetAllClassroomMembersParams struct {
	ClassID uuid.UUID `json:"class_id"`
	Offset  int32     `json:"offset"`
}

type GetAllClassroomMembersRow struct {
	ID       uuid.UUID `json:"id"`
	UserID   uuid.UUID `json:"user_id"`
	JoinedAt time.Time `json:"joined_at"`
}

func (q *Queries) GetAllClassroomMembers(ctx context.Context, arg GetAllClassroomMembersParams) ([]GetAllClassroomMembersRow, error) {
	rows, err := q.query(ctx, q.getAllClassroomMembersStmt, getAllClassroomMembers, arg.ClassID, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllClassroomMembersRow
	for rows.Next() {
		var i GetAllClassroomMembersRow
		if err := rows.Scan(&i.ID, &i.UserID, &i.JoinedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllJoinedClassrooms = `-- name: GetAllJoinedClassrooms :many
SELECT c.id, c.admin_id, c.name, c.description, c.section, c.room, c.subject, c.invite_code, c.visibility, c.created_at, c.updated_at
FROM classrooms c
WHERE c.id = (SELECT cm.class_id FROM classroom_members cm WHERE cm.class_id = c.id AND cm.user_id = $1)
ORDER BY c.created_at
LIMIT 10
OFFSET $2
`

type GetAllJoinedClassroomsParams struct {
	UserID uuid.UUID `json:"user_id"`
	Offset int32     `json:"offset"`
}

func (q *Queries) GetAllJoinedClassrooms(ctx context.Context, arg GetAllJoinedClassroomsParams) ([]Classroom, error) {
	rows, err := q.query(ctx, q.getAllJoinedClassroomsStmt, getAllJoinedClassrooms, arg.UserID, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Classroom
	for rows.Next() {
		var i Classroom
		if err := rows.Scan(
			&i.ID,
			&i.AdminID,
			&i.Name,
			&i.Description,
			&i.Section,
			&i.Room,
			&i.Subject,
			&i.InviteCode,
			&i.Visibility,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClassroomMemberById = `-- name: GetClassroomMemberById :one
SELECT id, class_id, user_id, created_at, updated_at
FROM classroom_members
WHERE user_id = $1 AND class_id = $2
LIMIT 1
`

type GetClassroomMemberByIdParams struct {
	UserID  uuid.UUID `json:"user_id"`
	ClassID uuid.UUID `json:"class_id"`
}

func (q *Queries) GetClassroomMemberById(ctx context.Context, arg GetClassroomMemberByIdParams) (ClassroomMember, error) {
	row := q.queryRow(ctx, q.getClassroomMemberByIdStmt, getClassroomMemberById, arg.UserID, arg.ClassID)
	var i ClassroomMember
	err := row.Scan(
		&i.ID,
		&i.ClassID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const leaveClassroom = `-- name: LeaveClassroom :one
DELETE FROM classroom_members
WHERE user_id = $1 AND class_id = $2
RETURNING id, class_id, user_id, created_at, updated_at
`

type LeaveClassroomParams struct {
	UserID  uuid.UUID `json:"user_id"`
	ClassID uuid.UUID `json:"class_id"`
}

func (q *Queries) LeaveClassroom(ctx context.Context, arg LeaveClassroomParams) (ClassroomMember, error) {
	row := q.queryRow(ctx, q.leaveClassroomStmt, leaveClassroom, arg.UserID, arg.ClassID)
	var i ClassroomMember
	err := row.Scan(
		&i.ID,
		&i.ClassID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
