// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0

package database

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addNewClassroomMemberStmt, err = db.PrepareContext(ctx, addNewClassroomMember); err != nil {
		return nil, fmt.Errorf("error preparing query AddNewClassroomMember: %w", err)
	}
	if q.createClassStmt, err = db.PrepareContext(ctx, createClass); err != nil {
		return nil, fmt.Errorf("error preparing query CreateClass: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteClassStmt, err = db.PrepareContext(ctx, deleteClass); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteClass: %w", err)
	}
	if q.deleteClassworkFromClassStmt, err = db.PrepareContext(ctx, deleteClassworkFromClass); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteClassworkFromClass: %w", err)
	}
	if q.deleteCommentFromPostStmt, err = db.PrepareContext(ctx, deleteCommentFromPost); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCommentFromPost: %w", err)
	}
	if q.deletePostFromClassStmt, err = db.PrepareContext(ctx, deletePostFromClass); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePostFromClass: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.followUserStmt, err = db.PrepareContext(ctx, followUser); err != nil {
		return nil, fmt.Errorf("error preparing query FollowUser: %w", err)
	}
	if q.getAllClassFromUserStmt, err = db.PrepareContext(ctx, getAllClassFromUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllClassFromUser: %w", err)
	}
	if q.getAllClassroomMembersStmt, err = db.PrepareContext(ctx, getAllClassroomMembers); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllClassroomMembers: %w", err)
	}
	if q.getAllCommentsFromPostStmt, err = db.PrepareContext(ctx, getAllCommentsFromPost); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllCommentsFromPost: %w", err)
	}
	if q.getAllFollowersStmt, err = db.PrepareContext(ctx, getAllFollowers); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllFollowers: %w", err)
	}
	if q.getAllFollowingStmt, err = db.PrepareContext(ctx, getAllFollowing); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllFollowing: %w", err)
	}
	if q.getAllJoinedClassroomsStmt, err = db.PrepareContext(ctx, getAllJoinedClassrooms); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllJoinedClassrooms: %w", err)
	}
	if q.getClassStmt, err = db.PrepareContext(ctx, getClass); err != nil {
		return nil, fmt.Errorf("error preparing query GetClass: %w", err)
	}
	if q.getClassWorkStmt, err = db.PrepareContext(ctx, getClassWork); err != nil {
		return nil, fmt.Errorf("error preparing query GetClassWork: %w", err)
	}
	if q.getClassroomMemberByIdStmt, err = db.PrepareContext(ctx, getClassroomMemberById); err != nil {
		return nil, fmt.Errorf("error preparing query GetClassroomMemberById: %w", err)
	}
	if q.getClassroomWithInviteCodeStmt, err = db.PrepareContext(ctx, getClassroomWithInviteCode); err != nil {
		return nil, fmt.Errorf("error preparing query GetClassroomWithInviteCode: %w", err)
	}
	if q.getFollowerByIdStmt, err = db.PrepareContext(ctx, getFollowerById); err != nil {
		return nil, fmt.Errorf("error preparing query GetFollowerById: %w", err)
	}
	if q.getOneFollowerStmt, err = db.PrepareContext(ctx, getOneFollower); err != nil {
		return nil, fmt.Errorf("error preparing query GetOneFollower: %w", err)
	}
	if q.getOnePostStmt, err = db.PrepareContext(ctx, getOnePost); err != nil {
		return nil, fmt.Errorf("error preparing query GetOnePost: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.getUsersStmt, err = db.PrepareContext(ctx, getUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsers: %w", err)
	}
	if q.insertNewClassworkStmt, err = db.PrepareContext(ctx, insertNewClasswork); err != nil {
		return nil, fmt.Errorf("error preparing query InsertNewClasswork: %w", err)
	}
	if q.insertNewCommentInPostStmt, err = db.PrepareContext(ctx, insertNewCommentInPost); err != nil {
		return nil, fmt.Errorf("error preparing query InsertNewCommentInPost: %w", err)
	}
	if q.insertNewPostStmt, err = db.PrepareContext(ctx, insertNewPost); err != nil {
		return nil, fmt.Errorf("error preparing query InsertNewPost: %w", err)
	}
	if q.leaveClassroomStmt, err = db.PrepareContext(ctx, leaveClassroom); err != nil {
		return nil, fmt.Errorf("error preparing query LeaveClassroom: %w", err)
	}
	if q.listAllPostsByUserStmt, err = db.PrepareContext(ctx, listAllPostsByUser); err != nil {
		return nil, fmt.Errorf("error preparing query ListAllPostsByUser: %w", err)
	}
	if q.listAllPostsFromClassStmt, err = db.PrepareContext(ctx, listAllPostsFromClass); err != nil {
		return nil, fmt.Errorf("error preparing query ListAllPostsFromClass: %w", err)
	}
	if q.listAllPublicClassStmt, err = db.PrepareContext(ctx, listAllPublicClass); err != nil {
		return nil, fmt.Errorf("error preparing query ListAllPublicClass: %w", err)
	}
	if q.listClassworkAdminStmt, err = db.PrepareContext(ctx, listClassworkAdmin); err != nil {
		return nil, fmt.Errorf("error preparing query ListClassworkAdmin: %w", err)
	}
	if q.listSubmittedClassworksStmt, err = db.PrepareContext(ctx, listSubmittedClassworks); err != nil {
		return nil, fmt.Errorf("error preparing query ListSubmittedClassworks: %w", err)
	}
	if q.unfollowUserStmt, err = db.PrepareContext(ctx, unfollowUser); err != nil {
		return nil, fmt.Errorf("error preparing query UnfollowUser: %w", err)
	}
	if q.updateAClassworkMarkStmt, err = db.PrepareContext(ctx, updateAClassworkMark); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAClassworkMark: %w", err)
	}
	if q.updateClassStmt, err = db.PrepareContext(ctx, updateClass); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateClass: %w", err)
	}
	if q.updateCommentContentInPostStmt, err = db.PrepareContext(ctx, updateCommentContentInPost); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCommentContentInPost: %w", err)
	}
	if q.updatePostContentStmt, err = db.PrepareContext(ctx, updatePostContent); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePostContent: %w", err)
	}
	if q.updateUserEmailStmt, err = db.PrepareContext(ctx, updateUserEmail); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserEmail: %w", err)
	}
	if q.updateUserPasswordStmt, err = db.PrepareContext(ctx, updateUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPassword: %w", err)
	}
	if q.updateUsernameStmt, err = db.PrepareContext(ctx, updateUsername); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUsername: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addNewClassroomMemberStmt != nil {
		if cerr := q.addNewClassroomMemberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addNewClassroomMemberStmt: %w", cerr)
		}
	}
	if q.createClassStmt != nil {
		if cerr := q.createClassStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createClassStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteClassStmt != nil {
		if cerr := q.deleteClassStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteClassStmt: %w", cerr)
		}
	}
	if q.deleteClassworkFromClassStmt != nil {
		if cerr := q.deleteClassworkFromClassStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteClassworkFromClassStmt: %w", cerr)
		}
	}
	if q.deleteCommentFromPostStmt != nil {
		if cerr := q.deleteCommentFromPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCommentFromPostStmt: %w", cerr)
		}
	}
	if q.deletePostFromClassStmt != nil {
		if cerr := q.deletePostFromClassStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePostFromClassStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.followUserStmt != nil {
		if cerr := q.followUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing followUserStmt: %w", cerr)
		}
	}
	if q.getAllClassFromUserStmt != nil {
		if cerr := q.getAllClassFromUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllClassFromUserStmt: %w", cerr)
		}
	}
	if q.getAllClassroomMembersStmt != nil {
		if cerr := q.getAllClassroomMembersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllClassroomMembersStmt: %w", cerr)
		}
	}
	if q.getAllCommentsFromPostStmt != nil {
		if cerr := q.getAllCommentsFromPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllCommentsFromPostStmt: %w", cerr)
		}
	}
	if q.getAllFollowersStmt != nil {
		if cerr := q.getAllFollowersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllFollowersStmt: %w", cerr)
		}
	}
	if q.getAllFollowingStmt != nil {
		if cerr := q.getAllFollowingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllFollowingStmt: %w", cerr)
		}
	}
	if q.getAllJoinedClassroomsStmt != nil {
		if cerr := q.getAllJoinedClassroomsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllJoinedClassroomsStmt: %w", cerr)
		}
	}
	if q.getClassStmt != nil {
		if cerr := q.getClassStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClassStmt: %w", cerr)
		}
	}
	if q.getClassWorkStmt != nil {
		if cerr := q.getClassWorkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClassWorkStmt: %w", cerr)
		}
	}
	if q.getClassroomMemberByIdStmt != nil {
		if cerr := q.getClassroomMemberByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClassroomMemberByIdStmt: %w", cerr)
		}
	}
	if q.getClassroomWithInviteCodeStmt != nil {
		if cerr := q.getClassroomWithInviteCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getClassroomWithInviteCodeStmt: %w", cerr)
		}
	}
	if q.getFollowerByIdStmt != nil {
		if cerr := q.getFollowerByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFollowerByIdStmt: %w", cerr)
		}
	}
	if q.getOneFollowerStmt != nil {
		if cerr := q.getOneFollowerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOneFollowerStmt: %w", cerr)
		}
	}
	if q.getOnePostStmt != nil {
		if cerr := q.getOnePostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOnePostStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.getUsersStmt != nil {
		if cerr := q.getUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersStmt: %w", cerr)
		}
	}
	if q.insertNewClassworkStmt != nil {
		if cerr := q.insertNewClassworkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertNewClassworkStmt: %w", cerr)
		}
	}
	if q.insertNewCommentInPostStmt != nil {
		if cerr := q.insertNewCommentInPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertNewCommentInPostStmt: %w", cerr)
		}
	}
	if q.insertNewPostStmt != nil {
		if cerr := q.insertNewPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertNewPostStmt: %w", cerr)
		}
	}
	if q.leaveClassroomStmt != nil {
		if cerr := q.leaveClassroomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing leaveClassroomStmt: %w", cerr)
		}
	}
	if q.listAllPostsByUserStmt != nil {
		if cerr := q.listAllPostsByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAllPostsByUserStmt: %w", cerr)
		}
	}
	if q.listAllPostsFromClassStmt != nil {
		if cerr := q.listAllPostsFromClassStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAllPostsFromClassStmt: %w", cerr)
		}
	}
	if q.listAllPublicClassStmt != nil {
		if cerr := q.listAllPublicClassStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAllPublicClassStmt: %w", cerr)
		}
	}
	if q.listClassworkAdminStmt != nil {
		if cerr := q.listClassworkAdminStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listClassworkAdminStmt: %w", cerr)
		}
	}
	if q.listSubmittedClassworksStmt != nil {
		if cerr := q.listSubmittedClassworksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listSubmittedClassworksStmt: %w", cerr)
		}
	}
	if q.unfollowUserStmt != nil {
		if cerr := q.unfollowUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unfollowUserStmt: %w", cerr)
		}
	}
	if q.updateAClassworkMarkStmt != nil {
		if cerr := q.updateAClassworkMarkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAClassworkMarkStmt: %w", cerr)
		}
	}
	if q.updateClassStmt != nil {
		if cerr := q.updateClassStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateClassStmt: %w", cerr)
		}
	}
	if q.updateCommentContentInPostStmt != nil {
		if cerr := q.updateCommentContentInPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCommentContentInPostStmt: %w", cerr)
		}
	}
	if q.updatePostContentStmt != nil {
		if cerr := q.updatePostContentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePostContentStmt: %w", cerr)
		}
	}
	if q.updateUserEmailStmt != nil {
		if cerr := q.updateUserEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserEmailStmt: %w", cerr)
		}
	}
	if q.updateUserPasswordStmt != nil {
		if cerr := q.updateUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPasswordStmt: %w", cerr)
		}
	}
	if q.updateUsernameStmt != nil {
		if cerr := q.updateUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUsernameStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                             DBTX
	tx                             *sql.Tx
	addNewClassroomMemberStmt      *sql.Stmt
	createClassStmt                *sql.Stmt
	createUserStmt                 *sql.Stmt
	deleteClassStmt                *sql.Stmt
	deleteClassworkFromClassStmt   *sql.Stmt
	deleteCommentFromPostStmt      *sql.Stmt
	deletePostFromClassStmt        *sql.Stmt
	deleteUserStmt                 *sql.Stmt
	followUserStmt                 *sql.Stmt
	getAllClassFromUserStmt        *sql.Stmt
	getAllClassroomMembersStmt     *sql.Stmt
	getAllCommentsFromPostStmt     *sql.Stmt
	getAllFollowersStmt            *sql.Stmt
	getAllFollowingStmt            *sql.Stmt
	getAllJoinedClassroomsStmt     *sql.Stmt
	getClassStmt                   *sql.Stmt
	getClassWorkStmt               *sql.Stmt
	getClassroomMemberByIdStmt     *sql.Stmt
	getClassroomWithInviteCodeStmt *sql.Stmt
	getFollowerByIdStmt            *sql.Stmt
	getOneFollowerStmt             *sql.Stmt
	getOnePostStmt                 *sql.Stmt
	getUserStmt                    *sql.Stmt
	getUserByUsernameStmt          *sql.Stmt
	getUsersStmt                   *sql.Stmt
	insertNewClassworkStmt         *sql.Stmt
	insertNewCommentInPostStmt     *sql.Stmt
	insertNewPostStmt              *sql.Stmt
	leaveClassroomStmt             *sql.Stmt
	listAllPostsByUserStmt         *sql.Stmt
	listAllPostsFromClassStmt      *sql.Stmt
	listAllPublicClassStmt         *sql.Stmt
	listClassworkAdminStmt         *sql.Stmt
	listSubmittedClassworksStmt    *sql.Stmt
	unfollowUserStmt               *sql.Stmt
	updateAClassworkMarkStmt       *sql.Stmt
	updateClassStmt                *sql.Stmt
	updateCommentContentInPostStmt *sql.Stmt
	updatePostContentStmt          *sql.Stmt
	updateUserEmailStmt            *sql.Stmt
	updateUserPasswordStmt         *sql.Stmt
	updateUsernameStmt             *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                             tx,
		tx:                             tx,
		addNewClassroomMemberStmt:      q.addNewClassroomMemberStmt,
		createClassStmt:                q.createClassStmt,
		createUserStmt:                 q.createUserStmt,
		deleteClassStmt:                q.deleteClassStmt,
		deleteClassworkFromClassStmt:   q.deleteClassworkFromClassStmt,
		deleteCommentFromPostStmt:      q.deleteCommentFromPostStmt,
		deletePostFromClassStmt:        q.deletePostFromClassStmt,
		deleteUserStmt:                 q.deleteUserStmt,
		followUserStmt:                 q.followUserStmt,
		getAllClassFromUserStmt:        q.getAllClassFromUserStmt,
		getAllClassroomMembersStmt:     q.getAllClassroomMembersStmt,
		getAllCommentsFromPostStmt:     q.getAllCommentsFromPostStmt,
		getAllFollowersStmt:            q.getAllFollowersStmt,
		getAllFollowingStmt:            q.getAllFollowingStmt,
		getAllJoinedClassroomsStmt:     q.getAllJoinedClassroomsStmt,
		getClassStmt:                   q.getClassStmt,
		getClassWorkStmt:               q.getClassWorkStmt,
		getClassroomMemberByIdStmt:     q.getClassroomMemberByIdStmt,
		getClassroomWithInviteCodeStmt: q.getClassroomWithInviteCodeStmt,
		getFollowerByIdStmt:            q.getFollowerByIdStmt,
		getOneFollowerStmt:             q.getOneFollowerStmt,
		getOnePostStmt:                 q.getOnePostStmt,
		getUserStmt:                    q.getUserStmt,
		getUserByUsernameStmt:          q.getUserByUsernameStmt,
		getUsersStmt:                   q.getUsersStmt,
		insertNewClassworkStmt:         q.insertNewClassworkStmt,
		insertNewCommentInPostStmt:     q.insertNewCommentInPostStmt,
		insertNewPostStmt:              q.insertNewPostStmt,
		leaveClassroomStmt:             q.leaveClassroomStmt,
		listAllPostsByUserStmt:         q.listAllPostsByUserStmt,
		listAllPostsFromClassStmt:      q.listAllPostsFromClassStmt,
		listAllPublicClassStmt:         q.listAllPublicClassStmt,
		listClassworkAdminStmt:         q.listClassworkAdminStmt,
		listSubmittedClassworksStmt:    q.listSubmittedClassworksStmt,
		unfollowUserStmt:               q.unfollowUserStmt,
		updateAClassworkMarkStmt:       q.updateAClassworkMarkStmt,
		updateClassStmt:                q.updateClassStmt,
		updateCommentContentInPostStmt: q.updateCommentContentInPostStmt,
		updatePostContentStmt:          q.updatePostContentStmt,
		updateUserEmailStmt:            q.updateUserEmailStmt,
		updateUserPasswordStmt:         q.updateUserPasswordStmt,
		updateUsernameStmt:             q.updateUsernameStmt,
	}
}
